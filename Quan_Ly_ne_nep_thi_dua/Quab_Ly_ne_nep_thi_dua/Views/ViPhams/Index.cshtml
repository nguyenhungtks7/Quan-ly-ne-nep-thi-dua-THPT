@*@model IEnumerable<Quab_Ly_ne_nep_thi_dua.Models.ViPham>*@
@model IPagedList<Quab_Ly_ne_nep_thi_dua.Models.ViPham>
@using PagedList.Mvc;
@using PagedList;
@{
    ViewBag.Title = "Index";
}

@*<link href="~/Content/assets/css/giaodienidex.css" rel="stylesheet" />*@
<style>


    /*Phân trang*/
    phantrang {
        margin-left: 10px;
    }

    .pagination {
        display: inline-block;
        padding-left: 0;
        margin: 20px 0;
        border-radius: 4px;
    }

        .pagination li {
            display: inline;
        }

            .pagination li a,
            .pagination li span {
                position: relative;
                float: left;
                padding: 6px 12px;
                margin-left: -1px;
                line-height: 1.42857143;
                color: #428bca;
                text-decoration: none;
                background-color: #fff;
                border: 1px solid #ddd;
            }

            .pagination li:first-child a {
                margin-left: 0;
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px;
            }

            .pagination li:last-child a {
                border-top-right-radius: 4px;
                border-bottom-right-radius: 4px;
            }

            .pagination li.active span {
                z-index: 2;
                color: #fff;
                cursor: default;
                background-color: #428bca;
                border-color: #428bca;
            }

            .pagination li.disabled span,
            .pagination li.disabled a,
            .pagination li.disabled a:hover,
            .pagination li.disabled a:focus {
                color: #777;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination li a:hover,
            .pagination li a:focus {
                z-index: 2;
                color: #2a6496;
                background-color: #eee;
                border-color: #ddd;
            }

            /* Định dạng cho phần số trang */
            .pagination li a,
            .pagination li span {
                display: inline-block;
                padding: 5px 10px;
                margin-right: 5px;
                border: 1px solid #ddd;
                line-height: 1.42857143;
                text-decoration: none;
                color: #337ab7;
                background-color: #fff;
            }

            .pagination li.active span,
            .pagination li.active a,
            .pagination li.active a:hover,
            .pagination li.active a:focus {
                z-index: 2;
                color: #fff;
                background-color: #337ab7;
                border-color: #337ab7;
                cursor: default;
            }

            .pagination li.disabled span,
            .pagination li.disabled a,
            .pagination li.disabled a:hover,
            .pagination li.disabled a:focus {
                color: #777;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

    .breadcrumb {
        font-size: 14px;
        margin-bottom: 10px;
        background: #f0f0f0;
        padding: 8px;
        border-radius: 5px;
    }

        .breadcrumb a {
            text-decoration: none;
            color: #333;
            font-weight: bold;
            transition: color 0.3s;
        }

        .breadcrumb span {
            color: #999;
            margin: 0 5px;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
            color: #555;
        }

    #alert-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }

    .alert {
        position: relative;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
        background: linear-gradient(to right, rgb(0, 176, 155), rgb(150, 201, 61));
        color: #fff;
        border-color: #c3e6cb;
        transition: opacity 0.5s ease-in-out;
    }


    .alert-hide {
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
    }
</style>
@if (TempData["Xoathanhcong"] != null && (bool)TempData["Xoathanhcong"])
{
    <div id="alert-container"></div>
    <script>
        function showNotification(message) {
            var alertElement = document.createElement('div');
            alertElement.classList.add('alert', 'alert-success');
            alertElement.textContent = message;
            document.getElementById('alert-container').appendChild(alertElement);

            setTimeout(function () {
                alertElement.classList.add('alert-hide');
                setTimeout(function () {
                    alertElement.remove();
                }, 500);
            }, 5000);
        }

        showNotification('Xóa thành công!');
    </script>
}
@if (TempData["Suathanhcong"] != null && (bool)TempData["Suathanhcong"])
{
    <div id="alert-container"></div>
    <script>
        function showNotification(message) {
            var alertElement = document.createElement('div');
            alertElement.classList.add('alert', 'alert-success');
            alertElement.textContent = message;
            document.getElementById('alert-container').appendChild(alertElement);

            setTimeout(function () {
                alertElement.classList.add('alert-hide');
                setTimeout(function () {
                    alertElement.remove();
                }, 500);
            }, 5000);
        }

        showNotification('Sửa thành công!');
    </script>
}
@if (TempData["Themthanhcong"] != null && (bool)TempData["Themthanhcong"])
{
    <div id="alert-container"></div>
    <script>
        function showNotification(message) {
            var alertElement = document.createElement('div');
            alertElement.classList.add('alert', 'alert-success');
            alertElement.textContent = message;
            document.getElementById('alert-container').appendChild(alertElement);

            setTimeout(function () {
                alertElement.classList.add('alert-hide');
                setTimeout(function () {
                    alertElement.remove();
                }, 500);
            }, 5000);
        }

        showNotification('Thêm thành công!');
    </script>
}
<div class="breadcrumb">
    <a href="@Url.Action("Thidua", "Thidua")">Quản lý điểm thi đua</a>
    <span>&gt;</span>
    <span>Quản lý vi phạm</span>
</div>
<div class="container mt-4">
    <h2>Quản lý vi phạm</h2>

    @using (Html.BeginForm())
    {
        <div style="background-color: #f8f9fa; padding: 10px; border: 1px solid #dee2e6; border-radius: 10px; ">
            <div class="row">
                <div class="col-md-3">
                    <p class="font-weight-bold">Lớp học</p>
                    @Html.DropDownList("searchLop", ViewBag.LopList as SelectList, "Chọn lớp", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <p class="font-weight-bold">Họ tên học sinh</p>
                    @Html.TextBox("searchHoTen", ViewBag.CurrentHoTenFilter as string, new { @class = "form-control", placeholder = "Họ tên học sinh" })
                </div>
                <div class="col-md-3">
                    <p class="font-weight-bold">Ngày sinh</p>
                    @Html.TextBox("searchNgaySinh", ViewBag.CurrentSDTFilter as string, new { @class = "form-control", type = "date" })
                </div>
                <div class="col-md-3"></div>
            </div>

            <div class="row mt-2">
                <div class="col-md-3">
                    <p class="font-weight-bold">Năm học</p>
                    @Html.DropDownList("NamHoc", Enumerable.Range(DateTime.Now.Year - 5, 20).Select(x => new SelectListItem { Text = $"{x} - {x + 1}", Value = $"{x} - {x + 1}" }), "Chọn năm", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <p class="font-weight-bold">Học kỳ</p>
                    @Html.DropDownList("HocKy", new List<SelectListItem>
                    {
                        new SelectListItem { Text = "Học kỳ 1", Value = "Học kỳ 1" },
                        new SelectListItem { Text = "Học kỳ 2", Value = "Học kỳ 2" }
                    }, "Chọn học kỳ", htmlAttributes: new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <p class="font-weight-bold">Tháng</p>
                    @Html.DropDownList("Thang", Enumerable.Range(1, 12).Select(i => new SelectListItem { Text = "Tháng " + i, Value = i.ToString() }), "Chọn tháng", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <p class="font-weight-bold">Tuần</p>
                    @Html.DropDownList("Tuan", Enumerable.Range(1, 20).Select(i => new SelectListItem { Text = "Tuần " + i, Value = i.ToString() }), "Chọn tuần", new { @class = "form-control" })
                </div>
            </div>
        </div>


        <div class="row justify-content-center mt-3">
            <div class="col-md-12">
                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary me-2 mr-2">
                        <ion-icon name="search-outline"></ion-icon> Tìm kiếm
                    </button>
                    <button class="btn btn-secondary" id="clearFilters">
                        <ion-icon name="refresh-outline"></ion-icon> Bỏ lọc
                    </button>
                </div>
            </div>
        </div>
    }

    @if (!String.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger mt-4" role="alert">
            <p style="color:red; text-align:center">  @ViewBag.ErrorMessage</p>
        </div>
    }

    <p>
        @Html.ActionLink("+ Thêm vi phạm", "Create", null, new { @class = "btn btn-success me-3 mt-4" })
    </p>

    <div class="table-bang">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>STT</th>
                    <th>Lớp</th>
                    <th>Họ tên học sinh</th>
                    <th>Ngày sinh</th>
                    <th>Giới tính</th>
                    <th>Tuần vi phạm</th>
                    <th>Tháng</th>
                    <th>Học kỳ</th>
                    <th>Năm học</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    var stt = 0;
                }
                @foreach (var item in Model)
                {
                    stt++;
                    <tr>
                        <td>@stt</td>
                        <td>@Html.DisplayFor(modelItem => item.HocSinh.Lop.TenLop)</td>
                        <td>@Html.DisplayFor(modelItem => item.HocSinh.HoTenHocSinh)</td>
                        @{
                            DateTime ngay;
                            if (item.HocSinh.NgaySinh is DateTime)
                            {
                                ngay = (DateTime)item.HocSinh.NgaySinh;
                            }
                            else
                            {
                                ngay = DateTime.MinValue;
                            }
                        }
                        <td>@ngay.ToString("dd/MM/yyyy")</td>
                        <td>@Html.DisplayFor(modelItem => item.HocSinh.GioiTinh)</td>
                        <td>@Html.DisplayFor(modelItem => item.TenTuan)</td>
                        <td>@Html.DisplayFor(modelItem => item.Thang)</td>
                        <td>@Html.DisplayFor(modelItem => item.HocKy)</td>
                        <td>@Html.DisplayFor(modelItem => item.NamHoc)</td>
                        <td>
                            <a href="@Url.Action("Edit", new { id = item.IdViPham })" class="btn btn-primary btn-sm"><ion-icon name="create-outline"></ion-icon> Sửa</a>
                            <a href="@Url.Action("Details", new { id = item.IdViPham })" class="btn btn-info btn-sm"><ion-icon name="eye-outline"></ion-icon> Xem</a>
                            <a href="@Url.Action("Delete", new { id = item.IdViPham })" class="btn btn-danger btn-sm"><ion-icon name="trash-outline"></ion-icon> Xóa</a>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="phantrang mt-4">
        <div class="row justify-content-center">
            <div class="col-12">
                @Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchTitle = Request.QueryString["searchTitle"] }))
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("clearFilters").addEventListener("click", function () {
            // Lấy ra tất cả các input và select trong form
            var formInputs = document.querySelectorAll('input[type="text"], input[type="date"], select');

            // Duyệt qua từng phần tử để reset giá trị
            formInputs.forEach(function (input) {
                input.value = ""; // Reset giá trị về rỗng
            });

            // Gửi form để xóa bộ lọc
            document.querySelector('form').submit();
        });
    });
</script>
